<template>
  <div>
     <div>
       <Tree :data="data2" style="float:left"></Tree>
    </div>
    <Card :bordered="false"
          dis-hover
          class="list-table-list-card ivu-mt"
          ref="card"
          style="width:85%;margin-left:250px"
          
          >
      <Form ref="form"
            :model="queryParams"
            :label-width="labelWidth"
            :label-position="labelPosition">
        <Row :gutter="24"
             type="flex"
             justify="begin">
             
          <Col v-bind="grid">
            <Input v-model="queryParams.roleName"
                   placeholder="请输入查询内容"
                   style="width: 300px;"
				   clearable
                   element-id="roleName" />
          </Col>
          
          <Col v-bind="grid"
               class="ivu-text-right">
          <FormItem>
            
            <Button type="primary"
                    @click="getData" style="margin-left:700px">查询</Button>
            
          </FormItem>
          </Col>
        </Row>
      </Form>
      <table-list ref="table"
                  :columns="columns"
                  :createRules="createRules"
                  :slots="slots"
                  :auth="auth"
                  :tableData="tableData"
                  :total="total"
                  :loading="loading"
                  @on-clear="handleClearSelect"
                  @on-delete="handleDelete"
                  @on-update="handleUpdate"
                  @on-refresh="getData"
                  @on-create="handleOpenCreate"
                  @handleUpdate11="handleUpdate11" />
      <Modal v-model="showModal"
             :title="form.id ? '新增' : '编辑'"
             :width="680"
             :loading="creating"
             @on-ok="handleCreate"
             :transfer="false"
              width="80%">
              
       <!-- 新增弹窗的内容         -->
       <span style=" margin-bottom:10px;display: block;font-size: 18px;font-family: Microsoft YaHei;color: #303133;">基本信息</span>
       <div>
           <template>
         <div style="float:left"><span>配置模块</span><Select v-model="model1" style="width:200px;margin-left:10px">
        <Option v-for="item in cityList" :value="item.value" :key="item.value">{{ item.label }}</Option>
        </Select></div>
       </template>
            </div>
             <div>
               </div>
           <template>
         <div style=" margin-left: 30px;float:left"><span>二级模块</span><Select v-model="model1" style="width:200px;margin-left:10px;">
        <Option v-for="item in cityList" :value="item.value" :key="item.value">{{ item.label }}</Option>
        </Select></div>
       </template>

              <div style=" margin-left: 20px;float:left"><span>字典名称</span>
    <Input v-model="value" placeholder="请输入字典名称" style="width: 200px;margin-left:10px" /></div>

       <div style=" margin-left: 20px;float:left"><span>字典名称</span>
    <Input v-model="value" placeholder="请输入字典名称" style="width: 200px;margin-left:10px" /></div>
     <template>
         <div style=" margin-left: 1200px;"><span>字典类型</span><Select v-model="model1" style="width:200px;margin-left:10px">
        <Option v-for="item in cityList" :value="item.value" :key="item.value">{{ item.label }}</Option>
        </Select></div>
       </template>
    <div id="Qianzuid"></div>
      <span style="margin-top:30px;display: block;font-size: 18px;
         font-family: Microsoft YaHei;color: #303133;">选项信息</span>             
        <Form ref="create"
              :model="form"
              :rules="createRules"
              :label-width="120">
              
        </Form>
      </Modal>
    </Card>
  </div>
</template>
<script>
import tableList from '@/components/table';

import { dataDicItemDetail,dataDicItemDelete,dataDicItemType,dataDicItemInsert,dataDicItemList,dataDicItemDropdown,dataDicItemUpdate } from '@/api/system-config/dictionary'
import { RemoveSpaces } from '@/plugins/utils/common'
import { mapState } from 'vuex';
export default {
  name: 'system-config-dictionary',
  components: {tableList},
  data () {
    return {
      grid: {
        xl: 8,
        lg: 8,
        md: 12,
        sm: 24,
        xs: 24
      },
      // 加载中
      loading: false,
      // 按钮权限
      auth: ['add', 'edit', 'delete'],
      // table 表头名称
      columns: [
         {
          title: '序号',
          key: 'number',
          show: true
           },
         {
           title: '配置模块',
           key: 'contrlModule',
           minWidth: 80,
           show: true
             },
          {
             title: '二级模块',
             key: 'twoModule',
             minWidth: 80,
             show: true
             },
           {
              title: '字典编码',
               key: 'dictCode',
               minWidth: 80,
               show: true
                },
            {
             title: '字典类型',
             key: 'dictType',
             minWidth: 100,
             show: true
                    },
             {
              title: '选项信息',
              key: 'cellOption',
              minWidth: 100,
              show: true
                },
                  
          {
                title: '操作',
                slot: 'action',
                align: 'left',
                minWidth: 100,
                show: true
              }
      ],
       data2: [
                    {
                        title: '全部',
                        expand: true,
                        
                                children: [
                                    {
                                        title: '工厂建模'
                                        
                                    },
                                    {
                                        title: '计划管理'
                                    },
                                     {
                                        title: '质量管理'
                                    },
                                     {
                                        title: '设备管理'
                                    },
                                     {
                                        title: '库存管理'
                                    },
                                     {
                                        title: '追溯管理'
                                    },
                                     {
                                        title: '车间管理'
                                    },
                                ]
                            }, 
                ],
      // 表格数据
      tableData: [
            {
                        number: '1',
                        twoModule:'注塑件07',
                        DctionNum:"利源模架",
                        dictCode:'ZSJ07',
                        dictType:"不可编辑",
                        cellOption:"加工；停工；故障；待机",
                        action: '',                          
                    },
      ],
      // 总条数
      total: 0,
      // 字段slot 需要转换的
      slots: {
        // 除了删除和编辑以外的操作
        action: []
      },
      // 创建数据
      form: {},
      // 查询参数
      queryParams: {
        pageSize: 10,
        pageNum: 1,
        phoneNum: undefined,
        userName: undefined
      },
      // 显示模态框
      showModal: false,
      // 模态框创建或者修改数据中
      creating: true,
      // 创建规则
      
    }
  },
  computed: {
    ...mapState('admin/layout', [
      'isMobile'
    ]),
    labelWidth () {
      return this.isMobile ? undefined : 100;
    },
    labelPosition () {
      return this.isMobile ? 'top' : 'right';
    }
  },
  methods: {
    /**
     * 重置
     */
    handleReset () {
      this.$refs.form.resetFields();
      this.getData();
    },
    /**
     * 表单重置
     */
    reset () {
      this.form = {
        id: undefined,
        remark: undefined,
        roleName: undefined
      }
      this.$refs.create.resetFields();
    },
    /**
     * 新建
     */
    handleOpenCreate () {
      this.reset();
      this.showModal = true;
    },
    /**
     * 获取数据
     */
    getData () {
      let that = this;
    //   that.loading = true;
      this.queryParams.pageSize = that.$refs.table.size;
      this.queryParams.pageNum = that.$refs.table.current;
      RoleList(this.queryParams).then(res => {
        that.loading = false;
        that.tableData = res.data;
        that.total = res.total;
        that.handleCheckSelect();
      })
    },
    /**
     * 根据ID获取用户信息
     */
    handleGetDataById (id) {
      dataDicItemDetail(id).then(res => {
        this.showModal = true;
        this.form = res;
      })
    },
    /**
     * 清空选中的数据
     */
    handleClearSelect () {
      let that = this;
      const selectedNames = that.$refs.table.selectedData.map(item => item.id);
      that.tableData.map(item => {
        item._checked = false;
      });
      // 改变数组本身，让vue监听到，渲染到页面
      that.tableData.splice(0, 1, that.tableData[0]);
    },
    /**
     * 切换数据选中数据
     */
    handleCheckSelect () {
      let that = this;
      const selectedNames = that.$refs.table.selectedData.map(item => item.id);
      that.tableData.map(item => {
        item._checked = selectedNames.indexOf(item.id) >= 0;
        return item;
      });
    },
    // 新增数据、修改数据
    handleCreate () {
      // 移除左右两边的空格
      RemoveSpaces(this.form);
      this.$refs.create.validate((valid) => {
        if (valid) {
          if (this.form.id === undefined) {
            dataDicItemInsert(this.form).then(res => {
              this.$Message.success('创建成功');
              this.getData();
            })
          } else {
            // 修改
            dataDicItemUpdate(this.form).then(res => {
              this.getData();
              this.$Message.success('修改成功');
            })
          }
          this.showModal = false;
          this.creating = false;
          this.$nextTick(() => {
            this.creating = true;
          });
        } else {
          this.creating = false;
          this.$nextTick(() => {
            this.creating = true;
          });
        }
      });
    },
    // 编辑数据
    handleUpdate (row) {
      this.reset();
      this.handleGetDataById(row.id)
    },
    /**
     * 删除
     */
    handleDelete (row) {
      const item = row;
      dataDicItemDelete(row.id).then(res => {
        this.$Message.success('删除成功');
        this.getData();
      })
    }
  },
  mounted () {
    this.getData();
  }
}
</script>
<style  lang="less" scoped>
 
</style>
